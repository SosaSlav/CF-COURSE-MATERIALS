Basics Notes

1: Strings/Numbers: 
Strings and numbers are very easy to work with. To set a string or a number, use the cfset command. To append strings and numbers to each other, use the & operator.
 
Example: 
<cfset aString = "hi">
<cfset aNumber = 42>
<cfset aStringAndANumber = aString & aNumber>

Outputs

aString: <cfoutput>#aString#</cfoutput>

aNumber: <cfoutput>#aNumber#</cfoutput>

aStringAndANumber: <cfoutput>#aStringAndANumber#</cfoutput>
 
If you have a big block of strings to set, you can use the cfsavecontent command.
<cfsavecontent variable="EmailContent">
Hi

We want to send you a hoverboard.
   		Let us know if you will accept this free offer.

  	-Us
</cfsavecontent>

<cfoutput>#EmailContent#</cfoutput>

2: Dates:

You can use built in functions like now() to make a date, or you can type the date into the variable assignment.
Example: 
<cfset DateToday = now()>
<cfset NewYearDay = "1/1/2019">
 
*You can use built-in functions to work with dates*
 To show how many days it has been since the turn of the century:
 
<cfset DaysSinceTurnOfCentury = DateDiff("d", "1/1/2000", now() )>
<cfoutput>#DaysSinceTurnOfCentury#</cfoutput>

Analysis: Personally I find the lack of a data increment (ie: i++) interesting, ask JC how the values progress incrementally in coldfusion arrays. 
Addendum: The usage of i and i++ are used to define increments after further reading in cf. 

Or suppose you want to know what the date will be 42 days from now:
<cfset FortyTwoDaysFromNow = DateAdd("d", now(), 42 )>
 
I’m assuming for this the sequenced data values contained in the parentheses are as follows (array value, initial value, compared value) 
3: Arrays: 
 
Arrays are an ordered series of data. Here's an example of a one dimensional array:
Array Creation
<cfset ThingsILike = ["Warm Sandy Beaches", "Tropical Drinks", 42]>
<cfdump var = "#ThingsILike#">

Here is where the creation of an array using multiple data types is found? 
Alternate Method: Array Creation
Here's another way to create an array, along with a couple of different ways to add data to an array:
<cfset ThingsILike = arrayNew(1)>

Adding Items to an Array

Arrays in ColdFusion start at 1, not 0. This is obscene and I can’t work under these conditions but I’ll accept that this isn’t forever and one day my arrays will begin at the optimal starting value of 0. Until then my existence is suffering but my arrays are eternal. 
 
<cfset ThingsILike[1]  = "Warm Sandy Beaches">

As cf uses a system that begins arrays at 1, this passes in a data value to variable ThingILike at the first array value. 

Alternate Method: Adding Items to an Array
You can append an item to the end of the array:
<cfset ArrayAppend( ThingsILike,  "Tropical Drinks")>
<cfset ArrayAppend( ThingsILike,  42)>
<cfdump var="#ThingsILike#">

See how I defined the strings in my array with quotes, and non-strings without? (Yes, I did my dear dev.) Each element in the array is an execution zone also, so if you need ColdFusion to evaluate something, just add it in:
<cfset ImportantDates = ["12/26/1975", now() ]>
<cfdump var = "#ImportantDates#">

Would I pass this in after the cfdump for variable ThingsILike or following the ArrayAppend cfset functions?

Displaying the Contents of an Array

You can not use the cfoutput command on an array because complex data types such as arrays are not displayable as a string. You can loop over the array, however, and output the strings to the page:
 
<cfset ThingsILike = ["Warm Sandy Beaches", "Tropical Drinks", 42]>

<cfloop array="#ThingsILike#" index="thing">
    <cfoutput>#thing#</cfoutput>
</cfloop>
 
So… This function allows me to define each value into a new independent existing array per string? Would the then variable ‘thing’ contain three values defined by the three inside ‘ThingsILike’ or would it create new arrays all titled ‘thing’ that contain each separate data value?  
 
 
4: Structs: 
Structs, aka Structures, are a collection of data, stored by a key, or name. Suppose for example, you wanted to store several kinds of fruit and also whether you like it or not. Structs provide a way to organize like name/value pairs and let you refer to them as a single collection.
 
Struct Creation
<cfset FruitBasket = structNew()>

Alternate Method: Struct Creation
<cfset FruitBasket = {}>

Adding Items to a Struct: Bracket Notation
<cfset FruitBasket = {}>
<cfset FruitBasket["Apple"] = "Like">
<cfset FruitBasket["Banana"] = "Like">
<cfset FruitBasket["Cherry"] = "Dislike">

<cfdump var = "#FruitBasket#">

Adding Items to a Struct Dot Notation
<cfset FruitBasket = {}>
<cfset FruitBasket.Apple = "Like">
<cfset FruitBasket.Banana = "Like">
<cfset FruitBasket.Cherry = "Dislike">

<cfdump var = "#FruitBasket#">

Both Applicable so I’m assuming this syntax is a matter of preference? Answer: Nope in regards to function differences the dot structure more closely follows case formatting of variables. 
Struct Creation and Population in One Statement

<cfset fruitBasket = {
    "Apple" = "Like",
    "Banana" = "Like",
    "Cherry" = "Dislike"
}>
<cfdump var = "#FruitBasket#">


Pro Tip: There are reasons to use one struct notation over another. If you ran some of these examples you would notice that the Bracket Notation preserved the case of the keys and the Dot Notation did not. Sometimes the preservation of case is important, like when passing values to Javascript or other case sensitive languages or formats. In the Struct Creation and Population in One Statement Example, the case will be preserved as long as they keys are surrounded by quotes. If the keys are not quoted, the case will be converted to upper case. Also, the bracket notation allows for a dynamic key reference. This is helpful when the name of the struct key will come from a runtime operation, such as looping over the struct. Many people find Dot Notation easier to read and use it most of the time, except in cases where Bracket Notation offers a feature Dot Notation does not.


Displaying the Contents of a Struct

You can't use the cfoutput command on structs either because, once again, they aren't displayable as a string. You can loop over the struct and output the keys and values to the page:
 
<cfloop collection="#FruitBasket#" item="fruit">
    <cfoutput>I #FruitBasket[fruit]# #fruit#</cfoutput><br>
</cfloop>

5: Queries:
 
Queries are recordsets. Recordsets contain a series of columns with 0 or more rows. You can think of a query like a single page of a spreadsheet with the columns across the top and rows down the side.
Most ColdFusion programs interact with databases. Database interaction takes the form of a query and ColdFusion makes it very easy to work with the data returned by the database. Databases will be covered more in more detail later on in the course.
 
<cfquery name="FruitQuery" datasource="fruit">
    SELECT Name, Price
    FROM FruitStore
    WHERE Price < 7
</cfquery>

<cfloop query="FruitQuery">
    #FruitQuery.Name# costs #FruitQuery.Price# <br>
</cfloop>

Going to need a discussion regarding this functionality and formatting tbh :/

Query Objects have a few special properties. You can use these properties to get specific information about the data inside the query.
queryname.recordcount
 How many rows does this query have?
queryname.columnlist
What columns does this query have?
queryname.currentrow
 What row number are we currently on inside a cfoutput or cfloop?

Basics Notes

Variable Naming: 

When adding comments it’s important I assume to prioritize commenting the context and functionality of said code to properly define purpose of functions for those reading. One way to add context is to use descriptive variable names.
Not Descriptive
<cfset var1 = "42" >

Descriptive
<cfset AnswerForEverything = 42 >


Adding Comments: 

Another way to add context to your program is by writing a descriptive comment. ColdFusion comments resemble HTML comments, only with an extra dash on each end.
Any text or programming code inside of a comment is not executed nor displayed. Only a person with access to the source code can see the content inside of a comment.

HTML Comment
<!-- I am an HTML Comment-->


ColdFusion Comment
<!---  I am a ColdFusion Comment--->

<cfscript>
    // I am a ColdFusion Comment in CFScript for a single line
    /*
        I am a multi-line
        ColdFusion Comment in CFScript
    */
</cfscript>

 


Always load the hard coded value if specified

 
Setting a Variable: 

<cfset variable = "value">
<cfscript>
   	variable = "value";
</cfscript>

Looping Over an Array:

<cfset FruitArray = ["apple", "banana", "cherry"]>
<cfloop from="1" to="#arrayLen( FruitArray)#" index="i">
    <cfoutput>#FruitArray[i]#</cfoutput>
</cfloop>

<cfscript>
    FruitArray = ["apple", "banana", "cherry"];
    for( i=1; i <= arrayLen(FruitArray); i++){
        writeOutput(FruitArray[i]);
    }
</cfscript>

Setting Variables (I’m assuming here’s where the js functionality is input- Discuss further with JC on Monday)

Introductory Setting of Variables

<cfset y = "x">

Example: 

<cfset ThisIs = "fun">

Now, ThisIs will hold the data "fun". You can look at the contents of a variable in ColdFusion by using the cfdump tag.

	<cfdump var = "#ThisIs#">

ThisIs - variable name
fun - the value assigned to the variable.
# - The pound sign tells ColdFusion to evaluate the contents.

In the below example, the pound sign will tell ColdFusion to replace the ThisIs string with the contents of the previously defined variable ThisIs.

Now, let’s apply this shit in three formats:

<cfdump var = "1 + 2"><br>

Our math problem is surrounded by the Double Quote character. This tells ColdFusion to treat the statement as a string and do no evaluations on it. 

<cfdump var = "#1 + 2#"><br>

We also surrounded the math problem with the pound sign. ColdFusion executes the statement and performs our calculation for us.

<cfdump var = "1 + 2 IS #1 + 2#"><br>

Notice we've mixed strings and evaluations through the correct use of the pound sign and the double quotes.

Interpretation: This formatting is similar to concatenated javascript in the formatting of data values vs strings in the use of characters assigned to data values ${} vs # and assigning strings using double quotes “”. 


The Left Side Of The Statement: <cfset ThisIs : 

The left side of the statement is the variable name. 

Can Include: Numbers (But must start with a letter), Multiple Words (But should be in CamelCase or using Under_Scores) 
Cannot Include: Spaces, Most Special Characters

For example, the word variable is a bad naming choice because the name adds no context to why the variable exists:
<cfset variable = "12/26/1975">

The variable name UserBirthdate is a good naming choice because it adds context to why the variable exists:
<cfset UserBirthdate = "12/26/1975">

The Right Side Of The Statement: "fun"> : 

The right side of the statement contains the value for the variable. Simple strings are enclosed in single or double quotes, with double quotes being the most common. This syntax for me is most resembling javascript still, especially with its’ quotation usage to denote strings. 
The right side of the statement is an execution zone. This means ColdFusion will attempt to evaluate items on the right side of the statement. 
Examples:
 
Print Out the Current Date

<cfset DateToday = now()>
<cfdump var = "#DateToday#">

Outcome: Todays’ Date

It is possible to evaluate items in quotes, if you use the # sign. 
 
Alternate Method: Print Out the Current Date : 
 
<cfset DateToday = "#now()#">
<cfdump var = "#DateToday#">
 
This code will evaluate to the same thing in the previous step. However, unless there are strings in the quotes, it's generally preferred to use the previous method.
 
To mix execution and strings, do this:
 
<cfset DateToday = "Today is: #now()#">
<cfdump var = "#DateToday#">
 
Concatenation:
 
<cfset DateToday = "Today is: " & now()>
<cfdump var = "#DateToday#">
 
You could also concatenate the strings using the & operator. 
 
So is this one:
<cfset DateToday = "Today is: ">
<cfset DateToday = DateToday & now()>
<cfdump var = "#DateToday#>
Interpretation: This function added DateToday to another evaluation and replaced the DateToday variable name with new content. The usage of now() allows for the setting of data to the variable so that it’s value is pulled upon the statement execution “Today is : “. 
 
Outputting a Variable
Purpose: You will often need to output the contents of the variables you create. One reason is to display the contents of a variable to the user, perhaps to display the username on a web page. Another reason is to verify the contents of a variable while you are in the process of writing or debugging your program.
 
About cfoutput: To display the contents of a variable to a user, use cfoutput. The variable reference must be a simple value that can be displayed as text. This includes Strings, Numbers, Dates, Times, and so on. Complex variables, such as Structs, Arrays, Queries, Functions, and so on, can not be displayed with the cfoutput command because they are not displayable as text.
 
Example of cfoutput Usage:

<cfset DateToday = "Today is: #now()#">
<cfoutput>#DateToday#</cfoutput>
 
The variable will be evaluated, and the variable contents will be added to the current end of the response buffer. This will be displayed to the user.
 
About cfdump: To inspect or verify the contents of a variable while writing or debugging your program, use cfdump. cfdump will convert the variable contents to a string representation and format it for easy viewing 
(any variable type allowed think query commands). The cfdump command can be used to help debug your program.

Example of cfdump Usage: 

<cfset DateToday = "Today is: #now()#">
<cfdump var = "#DateToday#">
This assigns the value #now()# to DateToday
 
<cfset DateArray = [dateFormat(now(), "short"), dateFormat(dateadd('d',1,now()), "short"), dateFormat(dateadd('d',2,now()), "short")]>
This substitutes js and allows for additional variable passing
<cfdump var = "#DateArray#">
Console log for array 
<cfset DateStruct = { today=dateFormat(now(), "short"), tomorrow=dateFormat(dateadd('d',1,now()), "short"), later=dateFormat(dateadd('d',2,now()), "short") }>
Passes in Values for [0,1,2] in Array
<cfdump var = "#DateStruct#">
